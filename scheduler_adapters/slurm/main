#!/share/apps/Python/noarch/2.7.4/gcc-4.4.6/bin/python

#
# This script is configured to be run over SSH and is configured in ~/.ssh/authorized_keys
# to be run when the user connects to the machine with a specific SSH key
# To be able to differentiate, which sub-script to run $SSH_ORIGINAL_COMMAND is used.
#

import os
import sys
import shlex
import inspect
from subprocess import Popen, PIPE

def run(command_and_args, error_on_stderr=True, error_on_nonzero_rc=True):
  ''' run a local system call
      behaviour on non-zero exit code or existence of stderr is controlled by the function parameters.
  '''
  try:
    process = Popen(shlex.split(command_and_args), shell=False, stdout=PIPE, stderr=PIPE)
    (stdout, stderr) = process.communicate()
    rc = process.returncode
  except:
    raise Exception("failed to run '%s': %s" % (command_and_args, sys.exc_info()[1]))

  if rc != 0 and error_on_nonzero_rc:
    raise Exception('\'%s\' returned exit code %d. stderr: %s' % (command_and_args, rc, stderr))

  if stderr != "" and error_on_stderr:
    raise Exception('error running command \'%s\': Got non-empty stderr: %s' % (command_and_args, stderr))

  return (stdout, stderr, rc)



CMDS = ['get_summary', 'get_jobs', 'get_job_details', 'get_machine_data', 'get_nodes', 'get_scontrol_job_output']

if 'SSH_ORIGINAL_COMMAND' in os.environ:
  cmd_and_args = os.environ['SSH_ORIGINAL_COMMAND']
  cmd = cmd_and_args.split()[0]

  if cmd in CMDS:
    path = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # script directory
    stdout,stderr,rc = run('%s/%s' % (path, cmd_and_args))
    print stdout
  else:
    print "ERROR: invalid command: %s" % cmd
